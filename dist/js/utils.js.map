{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/js/utils.ts"],"names":[],"mappings":";;AAAA,uCAAyC;AACzC,uCAAgD;AAEhD,iCAA8C;AAE9C;;;;GAIG;AACU,QAAA,eAAe,GAAG,UAAC,IAAgC;IAC9D,IAAM,UAAU,GAA8B,EAAE,CAAC;IAEjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF;;;;GAIG;AACU,QAAA,YAAY,GAAG,UAAC,KAAe;IAC1C,IAAI,KAAK,KAAK,gBAAQ,CAAC,QAAQ,EAAE;QAC/B,OAAO,gBAAQ,CAAC,KAAK,CAAC;KACvB;IACD,IAAI,KAAK,KAAK,gBAAQ,CAAC,GAAG,EAAE;QAC1B,OAAO,gBAAQ,CAAC,KAAK,CAAC;KACvB;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;GAGG;AACU,QAAA,WAAW,GAAG;;IACzB,8DAA8D;IAC9D,IAAM,OAAO,GAAG,uBAAe,EAAO,CAAC;IACvC,sEAAsE;IACtE,IAAI,QAAQ,SAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,UAAU,CAAC;IAE5C,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,2BAAmB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACvE,2CAA2C;QAC3C,QAAQ,GAAG,2BAAmB,CAAC,OAAO,CAAC;KACxC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { Severity } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { CordovaPlatformType } from './types';\n\n/**\n * Serializes all values of root-level keys into strings.\n * @param data key-value map.\n * @returns An object where all root-level values are strings.\n */\nexport const serializeObject = (data: { [key: string]: unknown }): { [key: string]: string } => {\n  const serialized: { [key: string]: string } = {};\n\n  Object.keys(data).forEach(dataKey => {\n    const value = data[dataKey];\n    serialized[dataKey] = typeof value === 'string' ? value : JSON.stringify(value);\n  });\n\n  return serialized;\n};\n\n/**\n * Convert js severity level which has critical and log to more widely supported levels.\n * @param level\n * @returns More widely supported Severity level strings\n */\nexport const processLevel = (level: Severity): Severity => {\n  if (level === Severity.Critical) {\n    return Severity.Fatal;\n  }\n  if (level === Severity.Log) {\n    return Severity.Debug;\n  }\n\n  return level;\n};\n\n/**\n * Gets the platform\n * @returns The current platform the SDK is running on, defaults to Browser if unknown.\n */\nexport const getPlatform = (): CordovaPlatformType => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const _window = getGlobalObject<any>();\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  let platform = _window?.cordova?.platformId;\n\n  if (!platform || !Object.values(CordovaPlatformType).includes(platform)) {\n    // Unsupported platform, default to browser\n    platform = CordovaPlatformType.Browser;\n  }\n\n  return platform;\n};\n"]}