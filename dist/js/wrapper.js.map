{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../../src/js/wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Breadcrumb, Event, Response, User } from '@sentry/types';\nimport { getGlobalObject, logger, SentryError } from '@sentry/utils';\n\nimport { CordovaOptions } from './backend';\nimport { CordovaPlatformType } from './types';\nimport { getPlatform, processLevel, serializeObject } from './utils';\n\n/**\n * Our internal interface for calling native functions\n */\nexport const NATIVE = {\n  PLUGIN_NAME: 'Sentry',\n  SUPPORTS_NATIVE_TRANSPORT: [CordovaPlatformType.Ios, CordovaPlatformType.Android],\n  SUPPORTS_NATIVE_SCOPE_SYNC: [CordovaPlatformType.Ios, CordovaPlatformType.Android],\n  SUPPORTS_NATIVE_SDK: [CordovaPlatformType.Android, CordovaPlatformType.Ios],\n  /**\n   * Starts native with the provided options.\n   * @param options CordovaOptions\n   */\n  async startWithOptions(_options: CordovaOptions): Promise<boolean> {\n    if (this.SUPPORTS_NATIVE_SDK.includes(getPlatform())) {\n      const options = {\n        enableNative: true,\n        ..._options,\n      };\n\n      this.enableNative = options.enableNative;\n\n      if (!options.enableNative) {\n        return false;\n      }\n      if (!options.dsn) {\n        logger.warn(\n          'Warning: No DSN was provided. The Sentry SDK will be disabled. Native SDK will also not be initialized.'\n        );\n        return false;\n      }\n\n      // filter out all the options that would crash native.\n      /* eslint-disable @typescript-eslint/unbound-method,@typescript-eslint/no-unused-vars */\n      const {\n        beforeSend,\n        beforeBreadcrumb,\n        integrations,\n        defaultIntegrations,\n        transport,\n        ...filteredOptions\n      } = options;\n      /* eslint-enable @typescript-eslint/unbound-method,@typescript-eslint/no-unused-vars */\n\n      return this._nativeCall('startWithOptions', filteredOptions)\n        .then(() => {\n          this._nativeInitialized = true;\n\n          return true;\n        })\n        .catch(() => {\n          this._nativeInitialized = false;\n\n          logger.warn('Warning: Native SDK was not initialized.');\n\n          return false;\n        });\n    }\n\n    this._nativeInitialized = false;\n\n    return false;\n  },\n\n  /**\n   * Sending the event over the bridge to native\n   * @param event Event\n   */\n  async sendEvent(event: Event): Promise<Response> {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n    if (!this.isNativeTransportAvailable()) {\n      throw this._NativeTransportError;\n    }\n\n    // Process and convert deprecated levels\n    event.level = event.level ? processLevel(event.level) : undefined;\n\n    const header = {\n      event_id: event.event_id,\n      sdk: event.sdk,\n    };\n\n    const payload = {\n      ...event,\n      message: {\n        message: event.message,\n      },\n    };\n\n    if (getPlatform() === CordovaPlatformType.Android) {\n      const headerString = JSON.stringify(header);\n      const payloadString = JSON.stringify(payload);\n      const payloadType = payload.type ?? 'event';\n\n      return this._nativeCall('captureEnvelope', headerString, payloadString, payloadType);\n    }\n\n    // Serialize and remove any instances that will crash the native bridge such as Spans\n    const serializedPayload = JSON.parse(JSON.stringify(payload));\n\n    // The envelope item is created (and its length determined) on the iOS side of the native bridge.\n    return this._nativeCall('captureEnvelope', header, serializedPayload);\n  },\n\n  /**\n   * Uses exec to call cordova functions\n   * @param action name of the action\n   * @param args Arguments\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async _nativeCall(action: string, ...args: any[]): Promise<any> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Promise<any>((resolve, reject) => {\n      if (!this.enableNative) {\n        reject('enableNative = false, using browser transport');\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const _window = getGlobalObject<any>();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const exec = _window && _window.Cordova && _window.Cordova.exec;\n      if (!exec) {\n        reject('Cordova.exec not available');\n      } else {\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          _window.Cordova.exec(resolve, reject, this.PLUGIN_NAME, action, args);\n        } catch (e) {\n          reject('Cordova.exec not available');\n        }\n      }\n    });\n  },\n\n  /**\n   * Sets the user in the native scope.\n   * Passing null clears the user.\n   * @param key string\n   * @param value string\n   */\n  setUser(user: User | null): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n\n    // separate and serialze all non-default user keys.\n    let defaultUserKeys = null;\n    let otherUserKeys = null;\n    if (user) {\n      const { id, ip_address, email, username, ...otherKeys } = user;\n      defaultUserKeys = serializeObject({\n        email,\n        id,\n        ip_address,\n        username,\n      });\n      otherUserKeys = serializeObject(otherKeys);\n    }\n\n    void this._nativeCall('setUser', defaultUserKeys, otherUserKeys);\n  },\n\n  /**\n   * Sets a tag in the native module.\n   * @param key string\n   * @param value string\n   */\n  setTag(key: string, value: string): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n\n    const stringifiedValue = typeof value === 'string' ? value : JSON.stringify(value);\n\n    void this._nativeCall('setTag', key, stringifiedValue);\n  },\n\n  /**\n   * Sets an extra in the native scope, will stringify\n   * extra value if it isn't already a string.\n   * @param key string\n   * @param extra any\n   */\n  setExtra(key: string, extra: unknown): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n    // we stringify the extra as native only takes in strings.\n    const stringifiedExtra = typeof extra === 'string' ? extra : JSON.stringify(extra);\n\n    void this._nativeCall('setExtra', key, stringifiedExtra);\n  },\n\n  /**\n   * Adds breadcrumb to the native scope.\n   * @param breadcrumb Breadcrumb\n   */\n  addBreadcrumb(breadcrumb: Breadcrumb): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    void this._nativeCall('addBreadcrumb', {\n      ...breadcrumb,\n      // Process and convert deprecated levels\n      level: breadcrumb.level ? processLevel(breadcrumb.level) : undefined,\n      data: breadcrumb.data ? serializeObject(breadcrumb.data) : undefined,\n    });\n  },\n\n  /**\n   * Clears breadcrumbs on the native scope.\n   */\n  clearBreadcrumbs(): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    void this._nativeCall('clearBreadcrumbs');\n  },\n\n  /**\n   * Sets context on the native scope. Not implemented in Android yet.\n   * @param key string\n   * @param context key-value map\n   */\n  setContext(key: string, context: { [key: string]: unknown } | null): void {\n    if (!this.isNativeScopeSyncAvailable()) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    void this._nativeCall('setContext', key, context !== null ? serializeObject(context) : null);\n  },\n\n  /**\n   * Triggers a native crash.\n   * Use this only for testing purposes.\n   */\n  crash(): void {\n    if (!this.enableNative) {\n      return;\n    }\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    void this._nativeCall('crash');\n  },\n\n  /**\n   * Returns whether the native client is available.\n   */\n  isNativeClientAvailable(): boolean {\n    return this.enableNative && this._nativeInitialized;\n  },\n\n  /**\n   * Returns whether the native transport is available.\n   */\n  isNativeTransportAvailable(): boolean {\n    return this.isNativeClientAvailable() && this.SUPPORTS_NATIVE_TRANSPORT.includes(getPlatform());\n  },\n\n  /**\n   * Returns whether native bridge supports scope sync.\n   */\n  isNativeScopeSyncAvailable(): boolean {\n    return this.isNativeClientAvailable() && this.SUPPORTS_NATIVE_SCOPE_SYNC.includes(getPlatform());\n  },\n\n  _NativeClientError: new SentryError('Native Client is not available.'),\n  _NativeTransportError: new SentryError('Native Transport is not available.'),\n\n  enableNative: true,\n  _nativeInitialized: false,\n\n  /** true if `getPlatform` has been called */\n  _didGetPlatform: false,\n};\n"]}