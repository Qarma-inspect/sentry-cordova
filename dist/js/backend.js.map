{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/js/backend.ts"],"names":[],"mappings":";;;AACA,wDAA8D;AAC9D,qCAA0D;AAC1D,uCAAsE;AACtE,uCAAwD;AAExD,gDAAwD;AACxD,qCAAmC;AA+BnC,sCAAsC;AACtC;IAAoC,0CAA2B;IAK7D,8CAA8C;IAC9C,wBAAsC,QAAwB;QAA9D,YACE,kBAAM,QAAQ,CAAC,SAShB;QAVqC,cAAQ,GAAR,QAAQ,CAAgB;QAE5D,KAAI,CAAC,eAAe,GAAG,IAAI,wBAAc,CAAC,QAAQ,CAAC,CAAC;QAEpD,IAAI,KAAI,CAAC,UAAU,EAAE,IAAI,QAAQ,CAAC,YAAY,KAAK,KAAK,EAAE;YACxD,KAAI,CAAC,oBAAoB,GAAG;gBAC1B,KAAI,CAAC,cAAc,EAAE,CAAC;YACxB,CAAC,CAAC;YACF,uBAAe,EAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,KAAI,CAAC,oBAAoB,CAAC,CAAC;SAC/F;;IACH,CAAC;IAED;;OAEG;IACI,2CAAkB,GAAzB,UAA0B,SAAkB,EAAE,IAAgB;QAC5D,OAAO,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACI,yCAAgB,GAAvB,UAAwB,OAAe,EAAE,KAA+B,EAAE,IAAgB;QAAjD,sBAAA,EAAA,QAAkB,gBAAQ,CAAC,IAAI;QACtE,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACO,wCAAe,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;YACtB,6DAA6D;YAC7D,OAAO,IAAI,oBAAa,EAAE,CAAC;SAC5B;QAED,IAAM,gBAAgB,yCACjB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,KACjC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,GACvB,CAAC;QAEF,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC3B,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;SACtD;QAED,OAAO,IAAI,0BAAgB,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAED,+BAA+B;IAE/B;;OAEG;IACK,uCAAc,GAAtB;QACE,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,uBAAe,EAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAEjG,cAAM,CAAC,gBAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SAChD;IACH,CAAC;IAED;;OAEG;IACK,mCAAU,GAAlB;QACE,0GAA0G;QAC1G,OAAO,uBAAe,EAAO,CAAC,OAAO,KAAK,SAAS,IAAI,uBAAe,EAAO,CAAC,OAAO,KAAK,SAAS,CAAC;IACtG,CAAC;IACH,qBAAC;AAAD,CAAC,AAzED,CAAoC,kBAAW,GAyE9C;AAzEY,wCAAc","sourcesContent":["import { BrowserOptions } from '@sentry/browser';\nimport { BrowserBackend } from '@sentry/browser/dist/backend';\nimport { BaseBackend, NoopTransport } from '@sentry/core';\nimport { Event, EventHint, Severity, Transport } from '@sentry/types';\nimport { forget, getGlobalObject } from '@sentry/utils';\n\nimport { CordovaTransport } from './transports/cordova';\nimport { NATIVE } from './wrapper';\n\n/**\n * Configuration options for the Sentry Cordova SDK.\n * @see CordovaFrontend for more information.\n */\nexport interface CordovaOptions extends BrowserOptions {\n  /**\n   * Enables crash reporting for native crashes.\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Should sessions be tracked to Sentry Health or not.\n   * Defaults to `true`.\n   *\n   * NOTE: Currently only supported on Android and iOS. Browser not yet supported.\n   */\n  enableAutoSessionTracking?: boolean;\n\n  /** The interval to end a session if the App goes to the background. */\n  sessionTrackingIntervalMillis?: number;\n\n  /** Enable scope sync from Java to NDK on Android */\n  enableNdkScopeSync?: boolean;\n\n  /** When enabled, all the threads are automatically attached to all logged events on Android */\n  attachThreads?: boolean;\n}\n\n/** The Sentry Cordova SDK Backend. */\nexport class CordovaBackend extends BaseBackend<BrowserOptions> {\n  private readonly _browserBackend: BrowserBackend;\n\n  private readonly _deviceReadyCallback?: () => void;\n\n  /** Creates a new cordova backend instance. */\n  public constructor(protected readonly _options: CordovaOptions) {\n    super(_options);\n    this._browserBackend = new BrowserBackend(_options);\n\n    if (this._isCordova() && _options.enableNative !== false) {\n      this._deviceReadyCallback = () => {\n        this._startOnNative();\n      };\n      getGlobalObject<Window>().document.addEventListener('deviceready', this._deviceReadyCallback);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return this._browserBackend.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return this._browserBackend.eventFromMessage(message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return new NoopTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    return new CordovaTransport(transportOptions);\n  }\n\n  // CORDOVA --------------------\n\n  /**\n   * Calling into native install function\n   */\n  private _startOnNative(): void {\n    if (this._deviceReadyCallback) {\n      getGlobalObject<Window>().document.removeEventListener('deviceready', this._deviceReadyCallback);\n\n      forget(NATIVE.startWithOptions(this._options));\n    }\n  }\n\n  /**\n   * Has cordova on window?\n   */\n  private _isCordova(): boolean {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    return getGlobalObject<any>().cordova !== undefined || getGlobalObject<any>().Cordova !== undefined;\n  }\n}\n"]}