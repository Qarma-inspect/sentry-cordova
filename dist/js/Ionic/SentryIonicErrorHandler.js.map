{"version":3,"file":"SentryIonicErrorHandler.js","sourceRoot":"","sources":["../../../src/js/Ionic/SentryIonicErrorHandler.ts"],"names":[],"mappings":";;;AAAA,qCAAgD;AAEhD;;;GAGG;AACH,IAAM,2BAA2B,GAAG,UAAwC,iBAAoB;IAC9F;QAAsC,mDAAiB;QAAvD;;QAKA,CAAC;QAJC,6CAAW,GAAX,UAAY,KAAU;;YACpB,iBAAM,WAAW,YAAC,KAAK,CAAC,CAAC;YACzB,uBAAgB,OAAC,KAAK,CAAC,aAAa,mCAAI,KAAK,CAAC,CAAC;QACjD,CAAC;QACH,8BAAC;IAAD,CAAC,AALD,CAAsC,iBAAiB,GAKtD;IAED,OAAO,uBAAuB,CAAC;AACjC,CAAC,CAAC;AAEO,kEAA2B","sourcesContent":["import { captureException } from '@sentry/core';\n\n/**\n * Wrap the ionic error handler with this method so Sentry catches unhandled errors on ionic.\n * See the documentation for more details.\n */\nconst withSentryIonicErrorHandler = <C extends new (...args: any[]) => any>(IonicErrorHandler: C): C => {\n  class SentryIonicErrorHandler extends IonicErrorHandler {\n    handleError(error: any) {\n      super.handleError(error);\n      captureException(error.originalError ?? error);\n    }\n  }\n\n  return SentryIonicErrorHandler;\n};\n\nexport { withSentryIonicErrorHandler };\n"]}